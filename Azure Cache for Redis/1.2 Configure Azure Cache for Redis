ðŸ›  Creating and Configuring Azure Cache for Redis
Important Configuration Parameters:
Name:
- The name must be globally unique in Azure (e.g., myapp-cache). It should only contain letters, numbers, and hyphens and can't start or end with a hyphen.

Location:
- Always place the Redis instance in the same region as your application to minimize latency and maximize reliability.

Cache Type (Tier):
- The tier you select determines the performance and feature set of the cache. You can choose between:
  - Basic: Ideal for development and non-production workloads.
  - Standard: Provides redundancy and is more suitable for production environments.
  - Premium: High-performance with features like clustering and persistence.
  - Enterprise & Enterprise Flash: For advanced needs, supporting Redis Labs features and lower-cost storage.

Clustering Support:
- Available in Premium, Enterprise, and Enterprise Flash tiers, enabling you to split your data across multiple nodes (shards). Clustering allows you to scale horizontally, improving performance and availability.

Connecting to Redis:
To interact with your Redis cache, youâ€™ll need the following information:
- Host Name: This is the public address of your cache (e.g., myapp-cache.redis.cache.windows.net).
- Access Keys: Youâ€™ll have two keys (primary and secondary), which act as passwords. These keys provide access to perform operations on the cache, and Microsoft recommends rotating these keys periodically.

Common Redis Commands:
Basic Operations:
- ping: Check if the server is responsive (returns "PONG").
- set [key] [value]: Store a key-value pair in the cache.
- get [key]: Retrieve the value for the specified key.
- exists [key]: Check if a key exists in the cache.

Data Manipulation:
- incr [key]: Increment the value of a key (useful for counters).
- del [key]: Delete the specified key from the cache.

Expiration:
- expire [key] [time]: Set a TTL (Time-To-Live) for a key, after which it will be automatically deleted. Expirations can be set in seconds or milliseconds.

Example:

> set counter 100
OK
> expire counter 5
(integer) 1
> get counter
100
...wait 5 seconds...
> get counter
(nil)

Accessing Redis from Clients:
- To interact with Azure Cache for Redis from your application, use the hostname, port, and one of the access keys you retrieved in the portal. Redis clients in various languages (like .NET, Java, or Python) can connect to your cache using these details.

Security Tip:
- Always treat access keys as confidential information. They provide full access to your Redis instance, so itâ€™s essential to handle them like passwords and rotate them regularly for enhanced security.

Best Practices:
- Tier Selection: For production environments, always opt for the Standard tier or higher to ensure reliability, redundancy, and support for clustering.
- Clustering: When scaling your Redis usage, especially for large datasets, clustering helps split data across multiple nodes for better performance and fault tolerance.
- Expiration: Use TTL for keys to ensure that stale data doesn't stay in memory indefinitely, improving memory management.
- Key Rotation: Regularly regenerate access keys to maintain security.
