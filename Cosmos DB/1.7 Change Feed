üîÑ What is the Change Feed?
The Change Feed in Azure Cosmos DB is a persistent, ordered log of changes (inserts and updates) to items in a container.
  ‚úÖ Sorted by modification time
  ‚úÖ Asynchronous and incremental processing
  ‚úÖ Changes can be processed by multiple consumers in parallel
  ‚ùå Deletes are not tracked (you can implement soft deletes with a "deleted": true flag and TTL)

üõ†Ô∏è Models for Accessing the Change Feed
There are two models for working with the change feed:
  1. Push Model (recommended)
  - You get automatic scaling, partition management, and state tracking
  - Easier to implement and maintain
  Uses:
    - Azure Functions (event-driven)
    - Change Feed Processor Library

  2. Pull Model
  - You write custom logic to poll and track state
  - Gives fine-grained control, useful for:
    - One-time data migrations
    - Reading from specific partition keys
    - Controlling processing pace

‚ö° Push Model Options
üß© Azure Functions with Cosmos DB Trigger
- Auto-triggered on changes
- Serverless; no infrastructure needed
- Scales automatically
- Based on change feed processor behind the scenes

üß© Change Feed Processor Library
Works with .NET SDK V3+ and Java SDK V4+. Involves four components:

Component	                  Description
- The monitored container: The monitored container has the data from which the change feed is generated. 
Any inserts and updates to the monitored container are reflected in the change feed of the container.

- The lease container: The lease container acts as state storage and coordinates the processing of the change feed across multiple workers.
The lease container can be stored in the same account as the monitored container or in a separate account.

- The compute instance: A compute instance hosts the change feed processor to listen for changes. 
Depending on the platform, it might be represented by a virtual machine (VM), a Kubernetes pod, 
an Azure App Service instance, or an actual physical machine. The compute instance has a unique 
identifier that's called the instance name throughout this article.

- The delegate: The delegate is the code that defines what you, the developer, want to do with each batch of changes that the change feed processor reads.

üìå Sample Setup Code (C#):
ChangeFeedProcessor changeFeedProcessor = cosmosClient
    .GetContainer("dbName", "sourceContainer")
    .GetChangeFeedProcessorBuilder<ToDoItem>(
        processorName: "changeFeedSample",
        onChangesDelegate: HandleChangesAsync)
    .WithInstanceName("consoleHost")
    .WithLeaseContainer(cosmosClient.GetContainer("dbName", "leaseContainer"))
    .Build();

await changeFeedProcessor.StartAsync();

üìå Delegate (Processor Logic):

static async Task HandleChangesAsync(
    ChangeFeedProcessorContext context,
    IReadOnlyCollection<ToDoItem> changes,
    CancellationToken cancellationToken)
{
    Console.WriteLine($"Changes for lease {context.LeaseToken}");

    foreach (ToDoItem item in changes)
    {
        Console.WriteLine($"Detected item ID {item.id}, created at {item.creationTime}");
        await Task.Delay(10); // simulate processing
    }
}

üîÅ Change Feed Lifecycle
- Check for new changes
- If none ‚Üí sleep (poll interval)
- If changes ‚Üí send batch to delegate
- If processing successful ‚Üí update lease and go back to step 1
